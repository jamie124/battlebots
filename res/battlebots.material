material texturedUnlit
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/textured-unlit.vert
            fragmentShader = res/shaders/textured-unlit.frag

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            
            sampler u_diffuseTexture
            {
                mipmap = true
                wrapS = CLAMP
                wrapT = CLAMP
                minFilter = LINEAR_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material texturedSpecular
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/textured.vert
            fragmentShader = res/shaders/textured.frag
			defines = SPECULAR

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            u_worldViewMatrix = WORLD_VIEW_MATRIX
            u_cameraPosition = CAMERA_VIEW_POSITION
            u_specularExponent = 50

            sampler u_diffuseTexture
            {
                mipmap = true
                wrapS = CLAMP
                wrapT = CLAMP
                minFilter = LINEAR_MIPMAP_LINEAR
                magFilter = LINEAR
            }

            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

material wall : texturedUnlit
{
    technique
    {
        pass
        {
            sampler u_diffuseTexture
            {
                path = @brick_grey
            }
        }
    }
}


material concreteFloor : texturedUnlit
{
    technique
    {
        pass
        {
            sampler u_diffuseTexture
            {
                path = @concrete
            }
        }
    }
}

// Defines a coloured material
material colored
{
    technique
    {
        pass
        {
            vertexShader = res/shaders/colored.vert
            fragmentShader = res/shaders/colored.frag

            u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
            
            
            renderState
            {
                cullFace = true
                depthTest = true
            }
        }
    }
}

// Defines a yellow colour
material yellow : colored
{
    technique
    {
        pass
        {
            // Set to yellow
            u_diffuseColor = 0.65, 0.7, 0, 1
        }
    }
}

// Defines a red colour
material red : colored
{
    technique
    {
        pass
        {
            // Set to yellow
            u_diffuseColor = 1.0, 0.0, 0.0, 1
        }
    }
}

// Defines a blue colour
material blue : colored
{
    technique
    {
        pass
        {
            // Set to blue
            u_diffuseColor = 0.0, 0.0, 1.0, 1
        }
    }
}

// Defines a green colour
material green : colored
{
    technique
    {
        pass
        {
            // Set to yellow
            u_diffuseColor = 0.0, 1.0, 0.0, 1
        }
    }
}